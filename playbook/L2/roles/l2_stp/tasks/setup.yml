---

# Initial setup required on DUT and TR
- block:
  - name: Fanout ports on DUT 
    command: bash -c "{{fanoutcmd}} --port {{item}} --mode {{splitport}} --speed {{speed}}"
    with_items:
        - "{{test_int}}"
        - "{{fanoutport}}"
    register: result
    when: (inventory_hostname == "DUT") 
  - name: Fanout port-groups on TR 
    command: bash -c "{{fanoutcmd}} --pg_name {{item.pg}} --mode {{item.mode}} --speed {{speed}}"
    with_items:
        - { pg: "{{port_group1}}", mode: "{{splitport}}" }
        - { pg: "{{port_group2}}", mode: "{{mode}}" }
    register: result
    when: (inventory_hostname == "TR")
  - name: Check the fanout port exists on DUT and TR
    command: bash -c "ip link show {{server_int}}"
    register: result 
    when: (inventory_hostname == "DUT") or (inventory_hostname == "TR")
  - name: STDOUT the "ip link show {{server_int}}" output
    debug:
      msg: "{{result.stdout_lines}}"
    when: (inventory_hostname == "DUT") or (inventory_hostname == "TR")

- block:
  - name: Dump the showversion command on DUT and TR
    command: bash -c "{{path}}/{{versionCommand}}"
    register: show_version
  - name: Get the MACHINE ID of DUT
    command: bash -c "cat /var/lib/dbus/machine-id"
    register: get_machine_id
  - name: Clean up the Journalctl Log
    command: bash -c "rm -rf /var/run/log/journal/{{get_machine_id.stdout_lines[0]}}/*"
    register: clean_up_logs
  - name: Enable logging for l2mac and NAS_L2 on DUT and TR
    command: bash -c "opx_logging_cli enable XSTP debug; opx_logging_cli enable NETLINK debug"
    register: enable_log
  - name: Restart the systemd-journald service
    service:
      name: systemd-journald
      state: restarted
  - name: Kill the user process
    command: bash -c "pidof opx_nas_daemon"
    register: pid_process
  - name: Issue the command to kill the process
    command: bash -c "kill -USR1 {{pid_process.stdout_lines[0]}}"
    register: kill_process
  - name: Install bridge-utils package
    apt:
      name: bridge-utils
      update_cache: yes
    ignore_errors: yes
  - name: Cleanup the bridges on DUT and TR
    command: bash -c "opx-config-vlan set --id {{vlanid}} --ports none --taggedports none; opx-config-vlan delete --id {{vlanid}}"
    register: del_bridge
    ignore_errors: yes
  - name: Bring up the front end ports connected to DUT,TR and Server
    command: bash -c "ip link set dev {{item}} up"
    with_items:
        - "{{server_int}}"
        - "{{test_int1}}"
        - "{{test_int2}}"
  when: (inventory_hostname in groups['2host'][0]) or (inventory_hostname in groups['2host'][1])


- block:
  - name: Bring up the server side port
    command: bash -c "ip link set dev {{server_link}} up"
    register: bring_up_server
  - name: STDOUT the command to check the status of interface on server
    command: bash -c "ip link show {{server_link}}"
    register: verify_status_server
  - name: Verify the status of the interfaces on Server
    assert:
      that: "'state UP' in verify_status_server.stdout"
      msg: "Interface is not up on Server side"
  - name: Cleanup the bridges on all the machines
    command: bash -c "ip link set dev br{{vlanid}} down; brctl delbr br{{vlanid}}"
    register: del_bridge
    ignore_errors: yes
  when: (inventory_hostname in groups['2host'][2]) or (inventory_hostname in groups['2host'][3])


- block:
  - name: STDOUT the command to check the ports are up on DUT and TR
    command: bash -c "ip link show {{item}}"
    with_items:
        - "{{server_int}}"
        - "{{test_int1}}"
        - "{{test_int2}}"
    register: verify_status
  - name: Verify the status of the interfaces on DUT and TR
    assert:
      that:
        - "'state UP' in verify_status.results[0].stdout"
        - "'state UP' in verify_status.results[1].stdout"
        - "'state UP' in verify_status.results[2].stdout"
      msg: "Interfaces are not up"
  when: (inventory_hostname in groups['2host'][0]) or (inventory_hostname in groups['2host'][1])
